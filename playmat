;; Anything you type in here will be executed
;; immediately with the results shown on the
;; right.
(print "Hi")
(def playmatrix (atom [{:spot1 0 :spot2 0 :spot3 0} {:spot1 0 :spot2 0 :spot3 0} {:spot1 0 :spot2 0 :spot3 0}]))

(keyword (str "spot" (+ 1 1)))

 (get @playmatrix 0)

 (defn keyify [x]
   (keyword (str "spot" (+ x 1))))


(defn get-val [x y]
  ((get @playmatrix y) (keyify x)))

(get-val 0 1)
(assoc-in @playmatrix [1 :spot1] "x")

(defn taken [x y]
  (not (= (get-val x y) 0)))

(defn set-val [x y xo]
  (swap! playmatrix assoc-in [y (keyify x)] xo))

(taken 0 0)
(nth @playmatrix 2)

(defn set-x [x y]
  (if (not (taken x y))
    (do
      (set-val x y "x")
      true)
    false)
  )

(defn get-vertical [x]
  (reduce str (map #((keyify x) %) @playmatrix)))

(defn get-horizontal [y]
  (reduce str (vals (get @playmatrix y))))
(defn x-won? [row]
  (= row "xxx"))
(defn y-won? [row]
  (= row "yyy"))

(defn get-diagonal [x & {:keys [size]
                         :or {size 2}}]
(let [val []]
 (for [y (range size)
       :let xindex (- size i)]
     (if (= x 0) (conj val (str ((get @playmatrix y) (keyify y))))))))


;;(str (a :spot3) (b :spot2) (c :spot1)))))
(get-diagonal 2)

(defn did-they-win [validator]
  (not-every? false? (map #(validator (get-horizontal %)) (range 3))))


(did-they-win x-won?)
(did-they-win y-won?)


(set-x 0 1)
@playmatrix
(get-horizontal 0)
(get-horizontal 1)
(get-vertical 0)




